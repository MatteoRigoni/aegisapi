@page "/"
@inject IMetricsService MetricsService
@inject ISnackbar Snackbar

<MudGrid Class="pa-4">
    <MudItem xs="12" sm="6" md="3">
        <MudChart ChartType="ChartType.Line" Options="@chartOptions"
                  Labels="@Enumerable.Range(0, rpsSamples.Count).Select(i => i.ToString()).ToArray()"
                  Datasets="@new ChartSeries[] { new() { Name = "Requests/s", Data = rpsSamples.ToArray() } }" />
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudChart ChartType="ChartType.Line" Options="@chartOptions"
                  Labels="@Enumerable.Range(0, uaEntropySamples.Count).Select(i => i.ToString()).ToArray()"
                  Datasets="@new ChartSeries[] { new() { Name = "UA Entropy", Data = uaEntropySamples.ToArray() } }" />
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudChart ChartType="ChartType.Line" Options="@chartOptions"
                  Labels="@Enumerable.Range(0, schemaErrorSamples.Count).Select(i => i.ToString()).ToArray()"
                  Datasets="@new ChartSeries[] { new() { Name = "Schema Errors", Data = schemaErrorSamples.Select(v => (double)v).ToArray() } }" />
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudChart ChartType="ChartType.Line" Options="@chartOptions"
                  Labels="@Enumerable.Range(0, wafBlockSamples.Count).Select(i => i.ToString()).ToArray()"
                  Datasets="@new ChartSeries[] { new() { Name = "WAF Blocks", Data = wafBlockSamples.Select(v => (double)v).ToArray() } }" />
    </MudItem>
</MudGrid>

@code {
    private const int MaxSamples = 50;
    private readonly List<double> rpsSamples = new();
    private readonly List<double> uaEntropySamples = new();
    private readonly List<int> schemaErrorSamples = new();
    private readonly List<int> wafBlockSamples = new();
    private readonly ChartOptions chartOptions = new() { TransitionDuration = TimeSpan.FromMilliseconds(300) };
    private CancellationTokenSource? cts;

    protected override async Task OnInitializedAsync()
    {
        cts = new();
        try
        {
            await MetricsService.StartMetricsAsync(OnMetric, cts.Token);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private Task OnMetric(MetricDto m)
    {
        AddSample(rpsSamples, m.Rps);
        AddSample(uaEntropySamples, m.UaEntropy);
        AddSample(schemaErrorSamples, m.SchemaErrors);
        AddSample(wafBlockSamples, m.WafBlocks);
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    private static void AddSample<T>(List<T> list, T value)
    {
        list.Add(value);
        if (list.Count > MaxSamples)
            list.RemoveAt(0);
    }

    public void Dispose()
    {
        cts?.Cancel();
    }
}
