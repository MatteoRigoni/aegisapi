@page "/metrics"
@inject IMetricsService MetricsService
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<MudStack Class="pa-4" Spacing="2">
    <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Refresh" OnClick="ResetLayout">Reset layout</MudButton>
    <div class="grid-stack">
        <MetricBlock Id="rps" X="0" Y="0" Width="3" Height="2">
            <MudChart ChartType="ChartType.Line"
                      XAxisLabels="@labels.ToArray()"
                      Series="@new[] { new ChartSeries { Name = "Requests/s", Data = rpsSamples.ToArray() } }" />
        </MetricBlock>
        <MetricBlock Id="ua" X="3" Y="0" Width="3" Height="2">
            <MudChart ChartType="ChartType.Line"
                      XAxisLabels="@labels.ToArray()"
                      Series="@new[] { new ChartSeries { Name = "UA Entropy", Data = uaEntropySamples.ToArray() } }" />
        </MetricBlock>
        <MetricBlock Id="schema" X="6" Y="0" Width="3" Height="2">
            <MudChart ChartType="ChartType.Line"
                      XAxisLabels="@labels.ToArray()"
                      Series="@new[] { new ChartSeries { Name = "Schema Errors", Data = schemaErrorSamples.ToArray() } }" />
        </MetricBlock>
        <MetricBlock Id="waf" X="9" Y="0" Width="3" Height="2">
            <MudChart ChartType="ChartType.Line"
                      XAxisLabels="@labels.ToArray()"
                      Series="@new[] { new ChartSeries { Name = "WAF Blocks", Data = wafBlockSamples.ToArray() } }" />
        </MetricBlock>
    </div>
</MudStack>

@code {
    using System.Text.Json.Serialization;

    private readonly List<string> labels = new();
    private readonly List<double> rpsSamples = new();
    private readonly List<double> uaEntropySamples = new();
    private readonly List<double> schemaErrorSamples = new();
    private readonly List<double> wafBlockSamples = new();
    private int sampleIndex;
    private const int MaxSamples = 20;
    private CancellationTokenSource? cts;

    private readonly GridItem[] defaultLayout = new[]
    {
        new GridItem { Id = "rps", X = 0, Y = 0, W = 3, H = 2 },
        new GridItem { Id = "ua", X = 3, Y = 0, W = 3, H = 2 },
        new GridItem { Id = "schema", X = 6, Y = 0, W = 3, H = 2 },
        new GridItem { Id = "waf", X = 9, Y = 0, W = 3, H = 2 }
    };

    protected override async Task OnInitializedAsync()
    {
        cts = new();
        try
        {
            await MetricsService.StartMetricsAsync(OnMetric, cts.Token);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("metricLayout.init", defaultLayout);
        }
    }

    private Task OnMetric(MetricDto m)
    {
        labels.Add(sampleIndex.ToString());
        rpsSamples.Add(m.Rps);
        uaEntropySamples.Add(m.UaEntropy);
        schemaErrorSamples.Add(m.SchemaErrors);
        wafBlockSamples.Add(m.WafBlocks);
        sampleIndex++;

        Trim(labels);
        Trim(rpsSamples);
        Trim(uaEntropySamples);
        Trim(schemaErrorSamples);
        Trim(wafBlockSamples);

        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    private static void Trim<T>(List<T> list)
    {
        if (list.Count > MaxSamples)
            list.RemoveAt(0);
    }

    private async Task ResetLayout()
    {
        await JS.InvokeVoidAsync("metricLayout.reset");
    }

    public void Dispose()
    {
        cts?.Cancel();
    }

    private class GridItem
    {
        [JsonPropertyName("id")] public string Id { get; set; } = string.Empty;
        [JsonPropertyName("x")] public int X { get; set; }
        [JsonPropertyName("y")] public int Y { get; set; }
        [JsonPropertyName("w")] public int W { get; set; }
        [JsonPropertyName("h")] public int H { get; set; }
    }
}
