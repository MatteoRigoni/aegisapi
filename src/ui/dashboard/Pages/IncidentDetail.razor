@page "/incidents/{id}"
@inject IIncidentService IncidentService
@inject IControlPlaneService ControlService
@inject ISummarizerService SummarizerService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudStack Row="false" Class="page-padding">
    <h3>Incident Detail</h3>

    @if (incident is null)
    {
        <p>Loading...</p>
    }
    else
    {
        <MudCard Class="pa-4">
            <MudText Typo="Typo.h5">@incident.Title</MudText>
            <MudText>@incident.Summary</MudText>
            <MudText>Status: @incident.Status</MudText>
            <MudButton Color="Color.Primary" OnClick="ApplyFix" Disabled="loading">Apply Fix</MudButton>
        </MudCard>

        @if (summary is not null)
        {
            <MudCard Class="pa-4 mt-4">
                <MudText Typo="Typo.h6">AI Insights</MudText>
                <MudAlert Severity="Severity.Info">
                    <div>@summary.Summary</div>
                    @if (summary.SuggestedPolicyPatch is not null)
                    {
                        <div>Patch: @summary.SuggestedPolicyPatch.Rule</div>
                    }
                    <div>Confidence: @summary.Confidence.ToString("P0")</div>
                </MudAlert>
            </MudCard>
        }

        <MudButton Color="Color.Secondary" OnClick="GoBack" Class="mt-4">Back to Incidents</MudButton>
    }
</MudStack>

@code {
    [Parameter] public string id { get; set; } = string.Empty;
    private Incident? incident;
    private SummaryResponse? summary;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            incident = await IncidentService.GetIncidentAsync(id);
            var bundle = new IncidentBundle(
                "dev",
                "UI",
                incident.Title,
                Array.Empty<FeatureEventLite>(),
                new Dictionary<string,double>(),
                new Dictionary<string,int>(),
                null);
            summary = await SummarizerService.SummarizeAsync(bundle);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private async Task ApplyFix()
    {
        loading = true;
        try
        {
            await ControlService.ApplyFixAsync(id);
            Snackbar.Add("Fix applied", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Warning);
        }
        finally
        {
            loading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/incidents");
    }
}
