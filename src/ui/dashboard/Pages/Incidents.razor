@page "/incidents"
@using System.Linq
@inject IIncidentService IncidentService
@inject NavigationManager Nav
@inject ISnackbar Snackbar

<MudStack Class="pa-4">
    <MudStack Row Spacing="2" Class="mb-4">
        <MudTextField T="string"
                      @bind-Value="searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" />

        <MudSelect T="string" @bind-Value="statusFilter" Placeholder="Status" Clearable="true">
            <MudSelectItem T="string" Value="@string.Empty">All</MudSelectItem>
            @foreach (var s in StatusOptions)
            {
                <MudSelectItem T="string" Value="@s">@s</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="string" @bind-Value="severityFilter" Placeholder="Severity" Clearable="true">
            <MudSelectItem T="string" Value="@string.Empty">All</MudSelectItem>
            @foreach (var sev in SeverityOptions)
            {
                <MudSelectItem T="string" Value="@sev">@sev</MudSelectItem>
            }
        </MudSelect>
    </MudStack>

    <MudTable T="Incident" Items="FilteredIncidents" Hover="true" Dense="true" OnRowClick="OnRowClick" Class="clickable-rows">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Severity</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">
                <MudTooltip Text="@((string?)context.Summary ?? string.Empty)">@context.Id</MudTooltip>
            </MudTd>
            <MudTd DataLabel="Title">
                <MudTooltip Text="@((string?)context.Summary ?? string.Empty)">@((string?)context.Title ?? "—")</MudTooltip>
            </MudTd>
            <MudTd DataLabel="Status">
                <MudTooltip Text="@((string?)context.Summary ?? string.Empty)">@((string?)context.Status ?? "—")</MudTooltip>
            </MudTd>
            <MudTd DataLabel="Severity">
                <MudTooltip Text="@((string?)context.Summary ?? string.Empty)">
                    <MudChip T="string"
                             Color="@GetSeverityColor(context.Severity)"
                             Variant="Variant.Filled"
                             Value="@(context.Severity ?? string.Empty)">
                        @(context.Severity ?? "—")
                    </MudChip>
                </MudTooltip>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudStack>

@code {
    private IReadOnlyList<Incident> incidents = Array.Empty<Incident>();
    private string searchString = string.Empty;
    private string statusFilter = string.Empty;
    private string severityFilter = string.Empty;

    private IEnumerable<Incident> FilteredIncidents => incidents
        .Where(i => string.IsNullOrWhiteSpace(searchString) || (i.Title?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false))
        .Where(i => string.IsNullOrWhiteSpace(statusFilter) || string.Equals(i.Status, statusFilter, StringComparison.OrdinalIgnoreCase))
        .Where(i => string.IsNullOrWhiteSpace(severityFilter) || string.Equals(i.Severity, severityFilter, StringComparison.OrdinalIgnoreCase));

    private IEnumerable<string> StatusOptions =>
        incidents.Select(i => i.Status)
                 .Where(s => !string.IsNullOrWhiteSpace(s))
                 .Distinct(StringComparer.OrdinalIgnoreCase)!;

    private IEnumerable<string> SeverityOptions =>
        incidents.Select(i => i.Severity)
                 .Where(s => !string.IsNullOrWhiteSpace(s))
                 .Distinct(StringComparer.OrdinalIgnoreCase)!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            incidents = await IncidentService.GetIncidentsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Warning);
        }
    }

    private Color GetSeverityColor(string? severity) => severity?.ToLowerInvariant() switch
    {
        "critical" => Color.Error,
        "high" => Color.Warning,
        "medium" => Color.Info,
        "low" => Color.Success,
        _ => Color.Default
    };

    private void OnRowClick(TableRowClickEventArgs<Incident> e)
    {
        if (e?.Item is null) return;
        Nav.NavigateTo($"/incidents/{e.Item.Id}");
    }
}
